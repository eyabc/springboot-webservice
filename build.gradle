
/* 프로젝트 플러그인 의존성 관리 설정*/
buildscript {
    /* ext: build.gradle에서 사용하는 전역변수를 설정  */
    ext {
        /* springBootVersion 전역변수 생성*/
        springBootVersion = '2.1.7.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    /* spring-boot-gradle-plugin 라는 스프링부트 그레이들 플러그인의 2.1.7.RELEASE를 의존성으로 받겠다 */
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

/* 20 ~ 24 자바와 스프링부트를 사용하기 위한 필수 플러그인 */
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
/* 스프링부트의 의존성을 관리해 주는 필수 플러그인 */
apply plugin: 'io.spring.dependency-management'


group 'org.eyabc'
version '1.0-SNAPSHOT'
sourceCompatibility = 1.8

/*
    각종 의존성(라이브러리)들을 원격 저장소에서 받을지를 정한다.
    mavenCentral을 많이 사용하지만 최근에는 라이브러리 업로드 난이도 떄문에 jcenter도 많이 사용한다.
*/
repositories {
    /*
        이전부터 많이 사용하는 저장소지만 본인이 만든 라이브러리를 업로드 하기위해서는 정말 많은 과정과 설정이 필요하였기 때문에
        개발자들의 라이브러리가 점점 공유가 안되는 상황이 발생했다.
    */
    mavenCentral()
    /* mavenCentral의 업로드 어려움의 문제점을 간편화 하였고 mavenCentral 업로드 자동화도 가능하게 하였다. */
    jcenter()
}
/*
    프로젝트 개발에 필요한 의존성들을 선언하는 곳
    버전을 명시하지 않아야만 맨위의 classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    의 버전을 따라가게 된다.
    라이브러리들의 버전 관리가 한 곳에 집중되고 버전 충돌 문제도 해결된다
*/
dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('com.h2database:h2')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}
/* 롬복
* 자바개발시 자주쓰는 코드 Getter, Setter, 기본 생성자, toString 등을 어노테이션으로 자동생성 해준다.
*
* spring-boot-starter-data-jpa
* 스프링 부트용 Spring Data Jpa 추상화 라이브러리
* 스프링 부트 버전에 맞춰 자동으로 JPA 관련 라이브러리들의 버전을 관리해 준다.
*
* H2
* 인메모리 관계형 데이터베이스
* 별도의 설치가 필요 없이 프로젝트 의존성만으로 관리할 수 있다.
* 메모리에서 실행되기 때문에 애플리케이션을 재시작할 때마다 초기화 된다는 점을 이용하여 테스트 용도로 많이 사용된다.
* 이 책에서는 JPA의 테스트, 로컬 환경에서의 구동에서 사용할 예정이다.
* */
